#!/usr/bin/env python
# -- coding: utf-8 --

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
 
import rospy
import numpy as np
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist

class ControlLane():
    def __init__(self):
        self.sub_lane = rospy.Subscriber('/control/lane', Float64, self.cbFollowLane, queue_size = 1)
        #self.sub_lane = rospy.Subscriber('/control/lane', Float64, self.callback,queue_size = 1)
        self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size = 1)
        self.pub_cmd_vel = rospy.Publisher('/control/cmd_vel', Twist, queue_size = 1)

        self.lastError = 0
        self.MAX_VEL = 0.2
        self.integral = 0  # Initialize integral term
        

        rospy.on_shutdown(self.fnShutDown)


    def cbGetMaxVel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data

    def cbFollowLane(self, desired_center):
        center = desired_center.data

        print('center')
        print(center)

        error = center - 320
        #print('error')
        #print(error)

        Kp = 0.0015
        Kd = 0.003
        Ki = 0.000

        # Calculate proportional, derivative, and integral terms
        proportional = Kp * error
        derivative = Kd * (error - self.lastError)
        self.integral += Ki * error  # Integrate the error over time

        # Limit integral term to avoid windup (optional)
        self.integral = max(min(self.integral, 1.0), -1.0)  # Limit between -1 and 1

        # Combine terms for angular velocity
        angular_z = proportional + derivative + self.integral

        # Update last error for derivative term
        self.lastError = error

        twist = Twist()
        twist.linear.x = min(self.MAX_VEL * ((1 - (abs(error) / 320)) ** 2.2), 0.1) #0.26
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -max(angular_z, -1) if angular_z < 0 else -min(angular_z, 1)#2.84
        self.pub_cmd_vel.publish(twist)
        #print('x')
        #print(twist.linear.x)
        #print('z')
        #print(twist.angular.z )

        #Kp = 0.0002
        #Kd = 0.0001
        #ki = 0.00001
        # Kp = 0.0025
        # Kd = 0.007

        # angular_z = Kp * error + Kd * (error - self.lastError)
        # self.lastError = error
        
        # twist = Twist()
        # #twist.linear.x = 0.05        
        # twist.linear.x = min(self.MAX_VEL * ((1 - abs(error) / 320) ** 2.2), 0.05)
        # twist.linear.y = 0
        # twist.linear.z = 0
        # twist.angular.x = 0
        # twist.angular.y = 0
        # twist.angular.z = -max(angular_z, -1.0) if angular_z < 0 else -min(angular_z, 1.0)
        # self.pub_cmd_vel.publish(twist)

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist) 

    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main()
